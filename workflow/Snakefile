# Config file
configfile: "config/config.yml" # print(config["samples"]["P635L"])

# Include
include: "rules/STAR_alignment.smk"
include: "rules/DESeq_analysis.smk"
include: "rules/DEXSeq_analysis.smk"
# include: "rMATS_analysis.smk"

### ALL rules ###
# For STAR mapping
rule all_STAR_mapping:
  input:
    expand("results/STAR/P635L/{sample}/Aligned.sortedByCoord.out.bam", sample = config["samples"]["P635L"]),
    expand("results/STAR/R636Q/{sample}/Aligned.sortedByCoord.out.bam", sample = config["samples"]["R636Q"]),
    expand("results/STAR/P635L_after_base_editing/{sample}/Aligned.sortedByCoord.out.bam", sample = config["samples"]["P635L_after_base_editing"]),
    expand("results/STAR/R636Q_after_base_editing/{sample}/Aligned.sortedByCoord.out.bam", sample = config["samples"]["R636Q_after_base_editing"])
    
# Create index for bam files
rule all_create_bam_idx:
  input: 
    expand("results/STAR/P635L/{sample}/Aligned.sortedByCoord.out.bam.bai", sample = config["samples"]["P635L"]),
    expand("results/STAR/R636Q/{sample}/Aligned.sortedByCoord.out.bam.bai", sample = config["samples"]["R636Q"])

# Extract regions of mutation for P635L
rule all_extract_mutation_region:
  input:
    expand("results/STAR/IGV_mutation_check/P635L_{sample}_rbm20_mutation.bam", sample = config["samples"]["P635L"]),
    expand("results/STAR/IGV_mutation_check/P635L_{sample}_rbm20_mutation.bam.bai", sample = config["samples"]["P635L"]),
    expand("results/STAR/IGV_mutation_check/P635L_after_base_editing_{sample}_rbm20_mutation.bam", sample = config["samples"]["P635L_after_base_editing"]),
    expand("results/STAR/IGV_mutation_check/P635L_after_base_editing_{sample}_rbm20_mutation.bam.bai", sample = config["samples"]["P635L_after_base_editing"]),
    expand("results/STAR/IGV_mutation_check/R636Q_{sample}_rbm20_mutation.bam", sample = config["samples"]["R636Q"]),
    expand("results/STAR/IGV_mutation_check/R636Q_{sample}_rbm20_mutation.bam.bai", sample = config["samples"]["R636Q"]),
    expand("results/STAR/IGV_mutation_check/R636Q_after_base_editing_{sample}_rbm20_mutation.bam", sample = config["samples"]["R636Q_after_base_editing"]),
    expand("results/STAR/IGV_mutation_check/R636Q_after_base_editing_{sample}_rbm20_mutation.bam.bai", sample = config["samples"]["R636Q_after_base_editing"])

# Create count matrices for DESeq analysis with STAR alignment
rule all_count_matrices:
  input:
    expand("results/robject_featurecounts_{experiment}.rds", experiment = config["samples"])
    
### Appendix aLL rules ###
# DEXseq
# For DEXSeq count reads
rule all_DEXSeq_count_reads:
  input:
    expand("results/STAR/P635L/{sample}/read_counts_sorted_reverse.txt", sample = config["samples"]["P635L"]),
    expand("results/STAR/R636Q/{sample}/read_counts_sorted_reverse.txt", sample = config["samples"]["R636Q"])
    
# For clean DEXSeq count reads
rule all_clean_reads_counts:
  input:
    expand("results/STAR/P635L/{sample}/read_counts_sorted_reverse_clean.txt", sample = config["samples"]["P635L"]),
    expand("results/STAR/R636Q/{sample}/read_counts_sorted_reverse_clean.txt", sample = config["samples"]["R636Q"])

# To estimate DEXSeq dispersion
rule all_DEXSeq_dispersion:
  input:
    expand("results/DEXSeq/robject_{mutation}_dexseq_estdisp_3conditions.rda", mutation = config["mutation"])

# DEXSeq DEU test
rule all_DEXSeq_DEUtest:
  input:
    expand("results/DEXSeq/robject_{mutation}_dexseq_DEUres_WTvsHOM.rda", mutation = config["mutation"])
    
