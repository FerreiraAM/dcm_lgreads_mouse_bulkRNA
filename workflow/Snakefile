# Config file
configfile: "config/config.yml"

import glob
# infer input fastq files from dirs in config file and sample wildcard
def get_fastq_files(wildcards):
	indir = config["samples"][wildcards.mutation][wildcards.sample]
	file1 = glob.glob(indir + "/*" + wildcards.sample  + "_1_sequence.txt.gz")
	file2 = glob.glob(indir + "/*" + wildcards.sample  + "_2_sequence.txt.gz")
	return {"fastq1" : file1, "fastq2" : file2}

# Download index
rule download_genome:
	output: 
		idx = "resources/tx_indices/Mus_musculus.GRCm38.cdna.all.release-94_k31.idx"
	conda: 
		"envs/process_dcm_mouse_bulkRNA.yml"
	params:
		url = "https://github.com/pachterlab/kallisto-transcriptome-indices/releases/download/94/Mus_musculus.GRCm38.cdna.all.release-94_k31.idx.gz"
	shell:
		"wget -O {output.idx}.gz {params.url}; gunzip {output.idx}.gz"

# rule gzip_index:
# 	input: 
# 		"resources/tx_indices/Mus_musculus.GRCm38.cdna.all.release-94_k31.idx.gz"
#	output:
#		"resources/tx_indices/Mus_musculus.GRCm38.cdna.all.release-94_k31.idx"
#	conda: 
#		"envs/process_dcm_mouse_bulkRNA.yml"
#	shell:
#		"gzip -d {input} > {output}"

# Run mapping
rule run_kallisto:
	input: 
	  unpack(get_fastq_files),
		index = "resources/tx_indices/Mus_musculus.GRCm38.cdna.all.release-94_k31.idx"
	output:
		"results/{mutation}/{sample}/abundance.tsv",
		"results/{mutation}/{sample}/abundance.h5"
	params:
	  outdir = "results/{mutation}/{sample}"
	conda: 
		"envs/process_dcm_mouse_bulkRNA.yml"
	shell:
		"kallisto quant -i {input.index} -o {params.outdir} {input.fastq1} {input.fastq2}"
		
rule all_aligment:
  input:
    expand("results/P635L/{sample}/abundance.tsv", sample = config["samples"]["P635L"]),
    expand("results/R636Q/{sample}/abundance.tsv", sample = config["samples"]["R636Q"])
